{"version":3,"sources":["components/analog-clock/index.js","components/digital-clock/index.js","App.js","index.js"],"names":["Component","origin","currentTime","Date","hour","getHours","minute","getMinutes","second","getSeconds","circle","cx","cy","r","signature","className","x","y","Numbers","useCallback","radian","Math","PI","offset","texts","i","push","cos","sin","SecondHand","x1","y1","x2","y2","MinuteHand","style","animationDelay","HourHand","viewBox","xmlns","displayName","formatTime","time","type","nextHour","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","period","useMemo","useEffect","interval","setInterval","currSecond","nextSeconds","currMinute","nextMinute","currHour","clearInterval","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a446fbda.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\nimport \"./index.css\";\n\nconst Component = () => {\n  const origin = 20;\n  const currentTime = new Date();\n  const hour = currentTime.getHours() % 12;\n  const minute = currentTime.getMinutes();\n  const second = currentTime.getSeconds();\n\n  const circle = <circle cx={origin} cy={origin} r=\"19\"></circle>;\n\n  const signature = (\n    <text className=\"signature\" x={origin} y={origin + 1}>\n      dobi\n    </text>\n  );\n\n  const Numbers = useCallback(() => {\n    const radian = Math.PI / 6;\n    const offset = 1.5708; // start at radian 1.5708 (-90 degrees)\n    const texts = [];\n    for (let i = 1; i <= 12; i++) {\n      texts.push(\n        <text\n          x={18 * Math.cos(radian * i - offset) + origin}\n          y={18 * Math.sin(radian * i - offset) + origin}\n          key={i}\n        >\n          {i}\n        </text>\n      );\n    }\n    return <g className=\"numbers\">{texts}</g>;\n  }, []);\n\n  const SecondHand = useCallback(() => {\n    const radian = Math.PI / 30;\n\n    return (\n      <g className=\"second\">\n        <line\n          x1={origin}\n          y1={origin}\n          x2={17 * Math.cos(radian * second) + origin}\n          y2={17 * Math.sin(radian * second) + origin}\n        ></line>\n        <circle cx={origin} cy={origin} r=\".5\"></circle>\n      </g>\n    );\n  }, [second]);\n\n  const MinuteHand = useCallback(() => {\n    const radian = Math.PI / 30;\n\n    return (\n      <line\n        x1={origin}\n        y1={origin}\n        x2={16 * Math.cos(radian * minute) + origin}\n        y2={16 * Math.sin(radian * minute) + origin}\n        style={{ animationDelay: `-${second}s` }}\n        className=\"minute\"\n      ></line>\n    );\n  }, [minute, second]);\n\n  const HourHand = useCallback(() => {\n    const radian = Math.PI / 6;\n\n    return (\n      <line\n        x1={origin}\n        y1={origin}\n        x2={13 * Math.cos(radian * hour) + origin}\n        y2={13 * Math.sin(radian * hour) + origin}\n        style={{ animationDelay: `-${minute * 60 + second}s` }}\n        className=\"hour\"\n      ></line>\n    );\n  }, [hour, minute, second]);\n\n  return (\n    <svg\n      className=\"container-analog\"\n      viewBox=\"0 0 40 40\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      {circle}\n      {signature}\n      <Numbers />\n      <HourHand />\n      <MinuteHand />\n      <SecondHand />\n    </svg>\n  );\n};\n\nComponent.displayName = \"Analog Clock\";\nexport default Component;\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport \"./index.css\";\n\nconst formatTime = (time, type) => {\n  if (type === \"H\") {\n    const nextHour = time % 12 || 12;\n    return nextHour < 10 ? \"0\" + nextHour : nextHour;\n  }\n  return time < 10 ? \"0\" + time : time;\n};\n\nconst Component = () => {\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n  const period = useMemo(() => (hours < 12 ? \"AM\" : \"PM\"), [hours]);\n\n  useEffect(() => {\n    const currentTime = new Date();\n    setHours(currentTime.getHours());\n    setMinutes(currentTime.getMinutes());\n    setSeconds(currentTime.getSeconds());\n\n    const interval = setInterval(() => {\n      setSeconds((currSecond) => {\n        const nextSeconds = currSecond + 1;\n        if (nextSeconds === 60) {\n          setMinutes((currMinute) => {\n            const nextMinute = currMinute + 1;\n            if (nextMinute === 60) {\n              setHours((currHour) => {\n                return (currHour + 1) % 24;\n              });\n            }\n            return nextMinute % 60;\n          });\n        }\n        return nextSeconds % 60;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  //prettier-ignore\n  return (\n    <svg\n      className=\"container-digital\"\n      viewBox=\"0 0 40 40\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <text x=\"20\" y=\"20\">\n        {`${formatTime(hours, \"H\")}: ${formatTime(minutes)}: ${formatTime(seconds)}: ${period}`}\n      </text>\n    </svg>\n  );\n};\n\nComponent.displayName = \"Digital Clock\";\nexport default Component;\n","import AnalogClock from \"./components/analog-clock\";\nimport DigitalClock from \"./components/digital-clock\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <AnalogClock />\n      <DigitalClock />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}